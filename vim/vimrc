" vim: fenc=utf-8
" Character test: ûáéúõóüöíÛÁÉÚÕÓÜÖÍ

" -------- "
" Settings "
" -------- "

set nocompatible " I don't need the vi bugs
set backupskip=/tmp/*
set lazyredraw
set hidden
set kp=
set nostartofline
set laststatus=2
set noswapfile
"set complete=.,w  " only when often using many windows
set notimeout
set ttimeout
set ignorecase smartcase
set autowrite
set autoindent
set expandtab smarttab shiftwidth=4 tabstop=4
set foldmethod=manual
set hlsearch
nohls
set incsearch
set mouse=a
set vb t_vb=                    " no beep
set shortmess+=I                " no intro
set display=lastline            " no @ signs at the end of lines
set showcmd                     " show the unfinished normal mode commands
set noequalalways               " don't automatically resize the windows
set guioptions=agi              " no menu, no toolbar
set backspace=indent,eol,start  " 'normal' behaviour
set ruler                       " print where I am in the file
set history=500                 " keep this count of line of command! line history
set whichwrap=<,>,[,]           " moving with arrows in the beginning and end of lines
set listchars=tab:__,trail:-
set iskeyword=@,48-57,_,192-255
set linebreak
set suffixes+=.beam,.pyc        " these files should have lower priority then the others
set nojoinspaces
set nrformats=hex
set encoding=utf-8

if version >= 700
    set number
endif

if version >= 700
    set statusline=%{expand('%:p:h')}/%#hcsSLFileName#%t%##\ %h%m\ %L\ %=%#hcsSLBufferNumber#%n%##\ %#hcsSLWindowNumber#%{winnr()}%##%#hcsSLFileName#%##\ %#hcsSLFileLineNumber#%l%#hcsSLLineColNumber#\ %v
endif

" no blinking cursor:
set guicursor=n-v:block-Cursor/lCursor-blinkwait9999-blinkoff9999-blinkon0,ve:ver35-Cursor,o:hor50-Cursor,i-ci-c:ver25-Cursor/lCursor-blinkwait9999-blinkoff9999-blinkon0,r-cr:hor20-Cursor/lCursor-blinkwait9999-blinkoff9999-blinkon0,sm:block-Cursor-blinkwait175-blinkoff150-blinkon175
let g:is_bash = 1

" ------------ "
" Autocommands "
" ------------ "

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).

autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal! g`\"" |
            \ endif

" --------- "
" Filetypes "
" --------- "

filetype plugin indent on
syntax on
colorscheme default

" -------- "
" Mappings "
" -------- "

noremap <F1> :make <bar> cw<cr>
noremap <F4> @q
noremap <F11> mkHmlggg?G`lzt`k
noremap <F12> :syntax sync fromstart<cr>

imap <F1> <esc><F1>
imap <F2> <esc><F2>
imap <F3> <esc><F3>
imap <F4> <esc><F4>
imap <F5> <esc><F5>
imap <F6> <esc><F6>
imap <F7> <esc><F7>
imap <F8> <esc><F8>
imap <F9> <esc><F9>
imap <F10> <esc><F10>
imap <F11> <esc><F11>
imap <F12> <esc><F12>

noremap <a-left> :update<cr>:prev<cr>
noremap <a-right> :update<cr>:next<cr>
noremap ,<cr> :%s/<c-v><cr>/<cr>
noremap <s-PageUp> <c-w><up>
noremap <s-PageDown> <c-w><down>
noremap ,vm :so $MYVIMRC<cr>
imap <c-space> <space><space><space><space>
cnoremap <c-s> \_s\+
noremap <c-w>O :WinFullScreen<cr>
noremap ,m `m
nnoremap <up> g<up>
nnoremap <down> g<down>
nnoremap <c-j> <c-e>
nnoremap <c-k> <c-y>
nnoremap ,hw  :execute ":help " . expand("<cword>")<cr>
noremap ,sy :echo synIDattr(synID(line('.'),col('.'),1),'name')<cr>
noremap ,ft :setf <c-r>=&ft<cr><cr>
noremap ,cd :exec "lcd ".expand('%:p:h')<cr>
noremap ,CD :exec "cd ".expand('%:p:h')<cr>

" Mappings regarding settings
noremap ,cl :set cul!<cr>
noremap ,cc :set cuc!<cr>
noremap ,cb :set cuc! cul!<cr>
noremap ,nu :set number!<cr>
noremap ,ro :set noro<cr>:set ma<cr>
noremap ,wr :set wrap!<cr>
noremap ,lb :set linebreak!<cr>
noremap ,ws :set wrapscan!<cr>
noremap ,SP :set spell spelllang=hu,en,de<cr>
noremap ,S! :set spell!<cr>
noremap ,l! :set list!<cr>
noremap ,ti :let &titlestring = input("New title of the frame: ")<cr>

" Mappings regarding copy-paste
noremap ,d "+d
noremap ,y "+y
noremap ,p "+p
noremap ,P "+P
noremap ,gp "+gp
noremap ,gP "+gP
noremap ,,d "*d
noremap ,,y "*y
noremap ,,p "*p
noremap ,,P "*P
noremap ,,gp "*gp
noremap ,,gP "*gP
noremap ,all mlHmkgg"+yG'kz<cr>`l
noremap ,ad gg"_dG

" Mappings regarding search
noremap - /
nnoremap ,*   :set hls<cr>:let @/="\\<<c-r><c-w>\\>"<cr>
vnoremap ,*   :<del><del><del><del><del>set hls<cr>:let @/="\\<<c-r>*\\>"<cr>
nnoremap ,,*  :set hls<cr>:let @/="<c-r><c-w>\\c"<cr>
vnoremap ,,*  :<del><del><del><del><del>set hls<cr>:let @/="\\c<c-r>*"<cr>
nnoremap ,v*  :set hls<cr>:let @/="<c-r><c-w>"<cr>:vim '<c-r>/'
vnoremap ,v*  :<del><del><del><del><del>set hls<cr>:let @/="<c-r>*"<cr>:vim '<c-r>*'
nnoremap ,vw* :set hls<cr>:let @/="<c-r><c-w>"<cr>:vim '\<<c-r>/\>'

" Mappings regarding search&replace
nnoremap ,cw :%s/\<<c-r>=expand("<cword>")<cr>\>/<c-r>=expand("<cword>")<cr>/g<left><left>
vnoremap ,cw :<c-u>%s/<c-r>*/<c-r>*/g<left><left>
noremap ,c*w :*s/\<<c-r>=expand("<cword>")<cr>\>/<c-r>=expand("<cword>")<cr>/g<left><left>
noremap ,<space> :%s/ \+$/<cr>
noremap ,<cr> :%s/<c-v><cr>/<cr>

" Unmap confusing commands
noremap Q <nop>
noremap <s-up> <nop>
noremap <s-down> <nop>
noremap <s-left> <nop>
noremap <s-right> <nop>

" --------- "
" Underline "
" --------- "

" Underline:
"   Underlines the current line with the given character.
" Example:
"   Type this line:
"       something
"   Type the following command while the cursor is on that line:
"       :call Underline('-')
"   Now the line has been underlined with '-':
"       something
"       ---------
function! Underline(ch)
   let len = strlen(substitute(getline("."), ".", "x", "g"))
   normal o
   call setline(".",repeat(a:ch, len))
endfunction

" ,<char><char> underlines the current line with <char>.
" <char> may be any of the followings: - = ^ " ' :
noremap ,-- :call Underline('-')<cr>
noremap ,== :call Underline('=')<cr>
noremap ,^^ :call Underline('^')<cr>
noremap ,"" :call Underline('"')<cr>
noremap ,'' :call Underline("'")<cr>
noremap ,:: :call Underline(":")<cr>

" --- "
" HCW "
" --- "

" HCW:
"   Sets the horizontal size of the Vim window so that it will be just enough
"   for `n` columns. If `n` is not given, the default value of 80 is used.
" Examples:
"   :HCW      " sets the number of columns to 80
"   :HCW 70   " sets the number of columns to 70
function! HCW(...)
    exec 'set columns=' . ((a:0 == 0 ? 80 : a:1) +
    \ (&number ? max([&numberwidth, len(line('$')) + 1]) : 0))
endfunction

command! -nargs=? HCW call HCW(<args>)

" ----- "
" nohls "
" ----- "

command! -range HNohls nohls
noremap ,ls  :HNohls<cr>
noremap <silent> <cr> :HNohls<cr>

" --------------------------- "
" Additions to the MRU plugin "
" --------------------------- "

function! HMEFunction(name,split)
    " name: name of a pattern to search
    " split: is the window needed to be split
    if a:split == 1
        split
    endif
    MRU
    if a:name != ''
        let @/ = a:name
        exec 'normal /'.a:name."\<cr>"
    endif
endfunction

command! -nargs=? MS call HMEFunction("<args>",1)
command! -nargs=? ME call HMEFunction("<args>",0)
command! -nargs=? E call HMEFunction("<args>",0)

let MRU_Max_Entries = 100

" ----------------------------- "
" Copying stuff to the keyboard "
" ----------------------------- "

command! FileNameToClipboard let @+=expand('%:p') | let @*=@+
command! PathToClipboard let @+=expand('%:p:h') | let @*=@+
command! PureFileNameToClipboard let @+=expand('%:t') | let @*=@+
command! ModuleNameToClipboard let @+=expand('%:t:r') | let @*=@+

" -------------------------------- "
" Executing Vim code in the buffer "
" -------------------------------- "

" ,vv - Executes the visual area
" ,vl - Executed the current line
function! HRunVisual(mode) range
    if a:mode=='n'
        exec "normal! gvy"
    else
        exec "normal! \<esc>"
    endif
    @*
endfunction

vnoremap ,vv :call HRunVisual('v')<cr>
nnoremap ,vv :call HRunVisual('n')<cr>
noremap <silent> ,vl yy:@"<cr>

" --------------------- "
" Backup files settings "
" --------------------- "

if v:version >= 700 && exists("g:hcs_backupdir")
    " If I have a hcs_backup directory, let that be the backup directory;
    " otherwise don't back up.
    let &bdir = g:hcs_backupdir
    set backup
else
    set nobackup
endif

" We set the 'backupext' option to contain the current date and time, so that
" the name of the backup file will be the concatenation of the name of the
" normal file and the current date and time.
function! HRefreshBackup()
    execute ":set backupext=" . strftime(".%y%m%d_%H%M")
    " You may want to have %H%M%S instead of %H%M if you want to have the
    " possibility of having mltiple backups in a minute.
endfunction

au BufWritePre * call HRefreshBackup()

" ------------- "
" Undo settings "
" ------------- "

if has('persistent_undo')
    if exists("g:hcs_undodir")
        se undofile
        let &undodir = g:hcs_undodir
    endif
endif

" ---------- "
" Navigation "
" ---------- "

function! NavNext()
    if s:navigation_type == 0
        echo "Error navigation"
        let s:navigation_type = 1
        noremap <F5>  :cprev<cr>
        noremap <F6>  :cnext<cr>
    elseif s:navigation_type == 1
        echo "Buffer navigation"
        let s:navigation_type = 2
        noremap <F5>  :bprev<cr>
        noremap <F6>  :bnext<cr>
    else
        echo "Argument navigation"
        let s:navigation_type = 0
        noremap <F5>    :prev<cr>
        noremap <F6>    :next<cr>
    endif
endfunction

" Set Error navigation
let s:navigation_type = 0
silent call NavNext()

noremap <c-F12> :call NavNext()<cr>
command! NavNext call NavNext()
command! NavNext2 call NavNext() | call NavNext()

noremap <F7> :prev<cr>
noremap <F8> :next<cr>

" -------------- "
" Window manager "
" -------------- "

" Mappings:
"   CTRL-W d -- Delete a window
"   CTRL-W y -- Yank a window
"   CTRL-W p <direction> -- Paste a window

if version >= 700
function! HOpen(dir,what_to_open)

    let [type,name] = a:what_to_open

    if a:dir=='left' || a:dir=='right'
        vsplit
    elseif a:dir=='up' || a:dir=='down'
        split
    end

    if a:dir=='down' || a:dir=='right'
        exec "normal! \<c-w>\<c-w>"
    end

    if type=='buffer'
        exec 'buffer '.name
    else
        exec 'edit '.name
    end
endfunction

function! HYankWindow()
    let g:window = winnr()
    let g:buffer = bufnr('%')
    let g:bufhidden = &bufhidden
endfunction

function! HDeleteWindow()
    call HYankWindow()
    set bufhidden=hide
    close
endfunction

function! HPasteWindow(direction)
    call HOpen(a:direction,['buffer',g:buffer])
    let &bufhidden = g:bufhidden
endfunction

noremap <c-w>d :call HDeleteWindow()<cr>
noremap <c-w>y :call HYankWindow()<cr>
noremap <c-w>p<up> :call HPasteWindow('up')<cr>
noremap <c-w>p<down> :call HPasteWindow('down')<cr>
noremap <c-w>p<left> :call HPasteWindow('left')<cr>
noremap <c-w>p<right> :call HPasteWindow('right')<cr>
noremap <c-w>pk :call HPasteWindow('up')<cr>
noremap <c-w>pj :call HPasteWindow('down')<cr>
noremap <c-w>ph :call HPasteWindow('left')<cr>
noremap <c-w>pl :call HPasteWindow('right')<cr>
noremap <c-w>pp :call HPasteWindow('here')<cr>
noremap <c-w>P :call HPasteWindow('here')<cr>

endif

" --------------- "
" Man page viewer "
" --------------- "

command! -nargs=1 Mano :call HMano("<args>")

function! HMano(a)
    exec "Man " . a:a
    silent only
endfunction

" ---------
" Templates
" ---------

function! HTemplate() "{{{
    if &filetype == "erlang"
        let module_name = substitute(bufname('%'),'\.erl$','','g')
        put! = '-module('.module_name.').'
        put  = \"-author('csaba.hoch@gmail.com').\"
        put  = '-compile(export_all).'
        put  = ''
    elseif &filetype == "cpp"
        put! = '#include <iostream>'
        put  = ''
        put  = 'using namespace std;'
        put  = ''
        put  = 'int main()'
        put  = '{'
        put  = '    cout<<\"hello\"<<endl;'
        put  = '}'
    elseif &filetype == "java"
        let class_name = substitute(bufname('%'),'\.java$','','g')
        put! = ''
        put  = 'public class '.class_name.' {'
        put  = '    public static void main(String[] args) {'
        put  = '        System.out.println(\"hello\");'
        put  = '    }'
        put  = '}'
    elseif &filetype == "tex"
        put! = '\documentclass{article}'
        put  = '\usepackage[utf-8]{inputenc}'
        put  = ''
        put  = '\author{Csaba Hoch}'
        put  = '\title{todo}'
        put  = ''
        put  = '\begin{document}'
        put  = '  \maketitle'
        put  = ''
        put  = '\end{document}'
    elseif &filetype == "sh"
        put! = '#!/bin/bash'
        put  = ''
    elseif &filetype == "python"
        put! = '#!/usr/bin/python'
        put  = ''
    elseif &filetype == "perl"
        put! = '#!/usr/bin/perl'
        put  = ''
    endif
endfunction

command! HT :call HTemplate()

" ---------------------------------------------------------- "
" Conversion between camelcase and underscore variable names "
" ---------------------------------------------------------- "

command! -range CamelToUnderscore silent <line1>,<line2>s/[a-z0-9]\@<=[A-Z]\|[[:alnum:]]\@<=[A-Z][a-z]\@=/_&/g | <line1>,<line2>s/.*/\L&/g | noh
command! -range UnderscoreToCamel silent <line1>,<line2>s/\(\<\|_\)\([[:alnum:]]\)/\u\2/g | noh
