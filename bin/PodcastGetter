#!/usr/bin/env python3

# Downloads specific podcasts.

help_string = """\
PodcastGetter

mr1:
    PodcastGetter <title> <mmdd>/<HH>:<MM>+<M...>
    PodcastGetter <title> <wwd>/<HH>:<MM>+<M...>
  Note:
    A ':' can be prepended to the first argument in which case the file will be
    downloaded into the current directory.
bbc news:
    PodcastGetter <link>
other:
    PodcastGetter <title> <link>

The name of the output file will be `<title>.mp3`.
"""

import datetime
import os
import os.path
import pickle
import re
import shutil
import subprocess
import sys
import tempfile
import time
import urllib.request


def weekday_to_datetime(year, week, dayofweek, strf=False):
    """Creates a datetime object based on year+week+dayofweek.

    Arguments:
    - `year` (int)
    - `week` (int) -- Should be between 1 and 53.
    - `dayofmonth` (int) -- Should be between 1 (Monday) and 7 (Sunday).

    Returns: datetime.datetime
    """

    jan4 = datetime.date(year, 1, 4)
    day_diff = (dayofweek - jan4.isoweekday()) + (week - 1) * 7
    result = jan4 + datetime.timedelta(days = day_diff)
    if not strf:
        return result
    else:
        return (result.strftime('%m'), result.strftime('%d'))

def call(cmd):
    w = sys.stdout.write
    w('cmd: ')

    for arg in cmd:
        # we put `arg` between quotes if contains any character like space that
        # is not mentioned here
        if re.match('^[-_a-zA-Z0-9./+=:]+$', arg):
            w(arg)
        else:
            w("'%s'" % arg)
        w(' ')
    w('\n')
    subprocess.call(cmd)

##### Variables #####

join = os.path.join
year = datetime.datetime.today().year
# year = 2011
podcast_dir = '/a/media/audio/flash'
podcast_log = '/home/hcs/podcast_log'

dir_dict = {
    'mr': '1mr',
    'sci': '2sci',
    'comp': '3comp',
    'skept': '4skept',
    'etc': '5etc',
    'comedy': '6comedy',
    'book': '7book',
    'music': '9music',
}

dirs = { dir: join(podcast_dir, realdir)
         for dir, realdir in dir_dict.items() }


##### Global functions #####

def gettempfile():
    desc, tmpfile = tempfile.mkstemp()
    os.close(desc)
    return tmpfile

def mkdirp(dir):
    call(['mkdir', '-p', dir])

def gotodir(dir):
    mkdirp(dir)
    os.chdir(dir)

def wget(address, output):
    call(['wget', '-c', address, '-O', output])

def weekday(month, day):
    return datetime.datetime(year, month, day).strftime("%a")

def find_next(dir):
    max = 0
    for d in os.listdir(dir):
        try:
            i = int(d[0:2])
            if i > max:
                max = i
        except Exception:
            pass
    return '{0:02}'.format(max+1)

def mrget(address, file):
    call(['MRGET', address, file])

def mrget2(address, file):
    for line in str(urllib.request.urlopen(address).read(), encoding='latin2').split('\n'):
        m = re.search('<a href=" *(.*?) *">[Hh]allgassa meg!</a>', line)
        if m:
            real_address = m.group(1)
            break
    else:
        print('No address found.')
        return
    mrget(real_address, file)

def reencode_mp3(mp3file):
    tmpfile = gettempfile()
    call(['mplayer', '-vo', 'null', '-vc', 'null', '-ao', \
                     'pcm:waveheader:fast:file='+tmpfile, mp3file])
    call(['lame', tmpfile, mp3file])

def append_to_file(filename, str):
    with open(filename, 'a') as f:
        f.write(str)

def today():
    return datetime.date.today().strftime('%Y-%m-%d')

##### MR1 and bbc #####

def get_url(url, filename, max_kb):
    f = urllib.request.urlopen(url)
    g = open(filename, 'bw')
    quantum = 100
    kb = 0
    for i in range(max_kb // quantum):
        s = f.read(quantum * 1024)
        if len(s) == 0:
            class E(Exception):
                pass
            raise E()
        g.write(s)
        kb += quantum
        dt_str = datetime.datetime.now().strftime("%H:%M:%S")
        sys.stdout.write('[%s] %s kbyte (from %s) ' % (dt_str, kb, max_kb))
        sys.stdout.flush()
    g.close()
    sys.stdout.write('\n')
    sys.stdout.flush()

def get_mr1_time(month, day, hour, minute, length, mp3_name):
    max_kb = length * 750
    url = ("http://stream001.radio.hu:443/stream/%s%s%s_%s%.2d00_1.mp3" %
           (year, month, day, hour, minute))
    print('url: ' + url)

    i = 0
    while True:
        try:
            get_url(url, mp3_name, max_kb)
            print('Download successful after %s retries.' % i)
            break
        except Exception as e:
            print("Exception during get_mr1_time:" + str(e))
            if i < 10:
                print("Sleeping 2 minutes and trying again.")
                i += 1
                time.sleep(120)
            elif i < 20:
                print("Sleeping 11 minutes and trying again.")
                i += 1
                time.sleep(660)
            else:
                print("Giving up.")
                break

def call_cut(mp3name, from_='0:0', to='999:0'):
    tmpfile = gettempfile()
    print('Moving %s to %s' % (mp3name,tmpfile))
    os.rename(mp3name, tmpfile)
    params = ['cutmp3',
              '-i', tmpfile,
              '-a', from_,
              '-b', to,
              '-O', mp3name]
    print('Cutting:', params)
    call(params)

def handle_mr(a):
    if len(a) != 2:
        return False
    mr_match = re.match(r'(\d+)/(\d\d):(\d\d)\+(\d+)$', a[1])
    if mr_match is None:
        return False

    g = mr_match.group
    date, hour, minute, length = \
        g(1), g(2), int(g(3)), int(g(4))

    if len(date) == 3:
        g = re.match(r'(\d\d)(\d)$', date).group
        week, day_of_week = g(1), g(2)
        month, day = \
            weekday_to_datetime(year, int(week), int(day_of_week), strf=True)
    elif len(date) == 4:
        g = re.match(r'(\d\d)(\d\d)$', date).group
        month, day = g(1), g(2)
    else:
        return False

    dir = dirs['mr']
    if a[0][0] == ':':
        mp3_file = ('%s.mp3' % (a[0][1:],))
    else:
        gotodir(dirs['mr'])
        mp3_file = join(dir, '%s_%s.mp3' % (find_next(dir), a[0]))
    print ('hour', hour)
    print ('minute', minute)
    print ('length', length)
    print ('mp3_file', mp3_file)
    get_mr1_time(month, day, hour, minute, length, mp3_file)
    append_to_file(podcast_log, today() + ' ')
    return True

def handle_bbc(a):
    bbc_address = \
            'http://downloads.bbc.co.uk/podcasts/worldservice/globalnews/globalnews' \
            '_{year}{month}{day}-{hour}{minute}{ab}.mp3'
    match = \
        re.match(bbc_address.format(year=r'\d\d\d\d', month=r'(\d\d)', day=r'(\d\d)', \
                                    hour='(\d\d)', minute='\d\d', ab='.'), a[0])
    if match == None:
        return False

    os.chdir(dirs['mr'])
    g = match.group
    month, day, hour, address = g(1), g(2), g(3), a[0]
    ab = 'b' if int(hour) < 12 else 'c'
    mp3_file = '{0}{1}{2}.mp3'.format(month, day, ab)
    wget(address, mp3_file)
    return True

##### Usual podcasts #####

def cut(time):
    def get(address, mp3file):
        wget(address, mp3file)
        call(['Cut', mp3file, time])
    return get

def get_and_reencode(address, mp3file):
    wget(address, mp3file)
#    mp3file = '/a/media/audio/flash/6show/26tr 19.mp3'
    reencode_mp3(mp3file)

podcasts = [
    ('mr',    '',    mrget,       'http://www.mr1-kossuth.hu/m3u/(.*).m3u'),
    ('mr',    '',    mrget2,      'http://www.mr1-kossuth.hu/index.php?'),
    ('mr',    '',    wget,        'mr1fullspeed'),
    ('sci',   'sc',  wget,        'http://downloads.bbc.co.uk/podcasts/worldservice/scia'),
    ('sci',   'iv',  wget,        'http://downloads.bbc.co.uk/podcasts/worldservice/interview'),
    ('sci',   '',    wget,        'http://downloads.bbc.co.uk'),
    ('sci',   'tn',  wget,        'conversationsnetwork.*ITC.TN'),
    ('sci',   'st',  wget,        'pheedo'),
    ('sci',   'sw',  wget,        'guardian'),
    ('sci',   'ns',  wget,        'Naked_Scientists'),
    ('comp',  'so',  wget,        'stack-exchange'),
    ('comp',  'so',  wget,        'StackExchange'),
    ('comp',  'se',  wget,        'http://media.libsyn.com/media/seradio/seradio-episode(\d\d\d).*mp3'),
    ('comp',  'se',  wget,        'http://feedproxy.google.com/~r/se-radio'),
    ('comp',  'fl',  cut('0:30'), 'http://www.podtrac.com/pts/redirect.mp3/twit.cachefly.net/FLOSS-(\d\d\d).mp3'),
    ('comp',  'fl',  cut('0:30'), 'http://www.podtrac.com/pts/redirect.mp3/twit.cachefly.net/floss'),
    ('comp',  'lo',  wget,        'linuxoutlaws'),
    ('comp',  'uu',  cut('0:01'), 'http://podcast.ubuntu-uk.org/download/uupc_s(\d\d)e(\d\d)_high.mp3'),
    ('comp',  'sf',  wget,        'http://www.softwarefreedom.org/podcast-media/Software-Freedom-Law-Show'),
    ('comp',  'tr',  wget, 'http://www.tuxradar.com/files/podcast/'),
    #('comp',  'tr',  get_and_reencode, 'http://www.tuxradar.com/files/podcast/'),
    ('comp',  'sj',  wget,        'http://feedproxy.google.com/~r/ShotOfJaq'),
    ('comp',  'sj',  wget,        'http://audio.lugradio.org/shotofjaq'),
    ('comp',  'lp',  wget,        'http://advocacy.python.org/podcasts/littlebit'),
    ('comp',  'fp',  wget,        'frompythonimportpodcast.com'),
    ('comp',  'ff',  wget,        'softwarefreedom.org'),
    ('comp',  'sr',  wget,        'startups-for'),
    ('comp',  'oa',  wget,        'onarchitecture'),
    ('etc',   'itc', wget,        'http://itc.conversationsnetwork.org'),
    ('etc',   'itc', wget,        'http://sic.conversationsnetwork.org'),
    ('skept', 'sg',  wget,        'skepticsguide'),
    ('skept', 's5',  wget,        'sgu5x5'),
    ('skept', 'pi',  wget,        'pointofinquiry'),
    ('skept', 'fg',  wget,        'forgoodreason'),
    ('skept', 'sy',  wget,        'skepticality'),
    ('skept', 'sd',  wget,        'http://skeptoid.com'),
    ('etc',   '',    wget,        'http://.*'),
]

def handle_usual(a):
    for podcast in podcasts:
        dir, shortname, getfun, template = podcast

        # Does the podcast match the template?
        match = re.search(template, a[1])
        if match == None:
            continue

        # Getting the file
        dir = dirs[dir]
        mkdirp(dir)
        address = a[1]
        mp3_file = join(dir, '%s%s_%s.mp3' % (find_next(dir), shortname, a[0]))
        getfun(address, mp3_file)
        append_to_file(podcast_log, today() + ' ')
        append_to_file(podcast_log, mp3_file + '  ')
        return True
    return False

def handle_help(a):
    if a == [] or \
       (len(a) == 1 and a[0] in ['-h', '--help']):
        pass
    else:
        return False

    sys.stdout.write(help_string)
    return True

def main(a):

    handle_not_found_error = False

    if handle_help(a):
        pass
    elif handle_mr(a):
        pass
    elif handle_bbc(a):
        pass
    elif handle_usual(a):
        pass
    else:
        handle_not_found_error = True

    if handle_not_found_error:
        print("Handler not found.")
    else:
        s = '  '.join(a) + '\n'
        append_to_file(podcast_log, s)

if __name__ == '__main__':
    main(sys.argv[1:])
