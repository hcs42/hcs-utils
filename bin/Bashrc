#!/bin/bash

# My .bashrc

##### Computer dependent stuff #####

case $comp in

    giskard)

        function DVI
        {
            kdvi "$1" >/dev/null 2>/dev/null &
        }

        function PDF
        {
            evince "$1" >/dev/null 2>/dev/null &
        }

        function PS
        {
            kghostview "$1" >/dev/null 2>/dev/null &
        }

        alias mp="mplayer -fs"
        ;;
esac

##### settings #####

if [ "$EDITOR" = "" ]
then
    export EDITOR='vim'
fi

if [ "$HCS_VIM" = "" ]
then
    export HCS_VIM="vim"
fi

if [ "$HCS_VIM_F" = "" ]
then
    export HCS_VIM_F="vim"
fi

export HISTFILESIZE=100000
export HISTSIZE=10000
export HISTTIMEFORMAT="%Y-%m-%d %H:%M:%S "

# disable CTRL-S suspending the screen
stty -ixon

##### aliases #####

alias q=exit
alias c=clear
alias CO='./configure'
alias mak='make'
alias MCA="make clean && make all"
alias xb='xset -b'
alias '..'='cd ..'
alias '...'='cd ../..'
alias '....'='cd ../../..'
alias '.....'='cd ../../../..'
alias '......'='cd ../../../../..'
alias '.......'='cd ../../../../../..'
alias '........'='cd ../../../../../../..'
alias K='krusader --left . >/dev/null 2>/dev/null &'
alias ll='ls -lA'
alias cp="cp -i"
alias mv="mv -i"
alias GQ="gqview 1>/dev/null 2>/dev/null &"
alias ls="ls --color=auto"
alias R='ls -R'
alias PR="killall plasma; plasma >/dev/null 2>/dev/null &"
alias vmi='vim'
alias gvmi='gvim'
alias gerp='grep'
alias grpe='grep'
alias n='PodcastGetter'
alias l='Catless'

##### Timestat #####

function L
{
    echo "[`date '+%Y-%m-%d %H:%M:%S'`]" "$@" >> "/a/cp/hk/hk/hcs/hcslog_`hostname`"
}

function LE
{
    $HCS_VIM "/a/cp/hk/hk/hcs/hcslog_`hostname`"
}

function LC
{
    if [ "$1" = "" ]
    then
        len=20
    else
        len="$1"
    fi
    cat /a/cp/hk/hk/hcs/hcslog_giskard | tail -n "$len"
}

function s
{
    L stop
}

function TS
{
    DaysSince 2009-08-03
    Timestat -H --since 2009-08-03 -i python:perl:wave_ "$@"
}

export ACTIONFILES=/a/cp/hk/hk/hcs/hcslog_giskard:/a/cp/hk/hk/hcs/hcslog_hcs-virtual

##### git #####

alias Gs='git status'
alias Gco='git checkout'
alias Gt='gitk --all &'
alias Gri='git rebase -i'
alias Gcp='git cherry-pick'
alias Gd='PAGER="" git diff'

function Gb
{
    if [ "$#" == "0" ]
    then
        git branch --color -a | grep -v '^  zz_'
    else
        git branch "$@"
    fi
}

function GC
{
    if [ "$1" = "" ]; then
        msg='.'
    else
        msg="$1"
    fi
    git commit -a -m "$msg" | grep -v "^#"
}

alias Gc="git commit"
alias Gcf="git commit -F hcs/gitcommit"

function Gf
{
    git remote prune attis
    git fetch attis
}

# git fetch remote
function Gfr
{
    remotename=$1
    branch=$2
    git fetch -f "$remotename" "$branch:remotes/$remotename/$branch"
}

### git log ###

alias Gl='git log --color'

# show one commit
alias G1='Gl -p -n1 --stat'

# git log tree (similar to what gitk shows)
alias Glt="Gl --all --graph --decorate --date-order --date=default"

# git log references (newest commit on the top: like a "real" history)
alias Glr="Gl --all --decorate --date=default --walk-reflogs --no-merges"

### git completions ###

if [ "$linux" = true ]
then
    complete -o default -o nospace -F _git_diff Gd
    complete -o default -o nospace -F _git_commit Gc
    complete -o default -o nospace -F _git_branch Gb
    complete -o default -o nospace -F _git_checkout Gco
    complete -o default -o nospace -F _git_log Gl
    complete -o default -o nospace -F _git_log G1
    complete -o default -o nospace -F _git_log Glt
    complete -o default -o nospace -F _git_log Glr
    complete -o default -o nospace -F _git_push Git-rebranch
    complete -o default -o nospace -F _git_rebase Gr
    complete -o default -o nospace -F _git_rebase Gri
fi

##### Vim #####

function v-
{
    $HCS_VIM -R -
}

function v_start_server
    # $1: server name
{
    if [ "$1" = "" ]
    then
        servername=main
    else
        servername=$1
    fi
    $HCS_VIM --servername $servername -c "set titlestring=$servername"
}

function v
{
    if [ "$2" = "" ]
    then
        $HCS_VIM "$@"
    else
        servername=$1
        shift
        $HCS_VIM --servername $servername --remote-tab "$@"
    fi
}

function vm
{
    $HCS_VIM --servername main --remote-tab "$@"
}

function v_edit
{
    $HCS_VIM -c "E $1"
}

function vm_edit
{
    $HCS_VIM --servername main --remote-send ":Sp $1<cr>"
}

##### grep #####

function Grep
{
    exclude='^\([^:]*/CVS/[^:]*\|/git/\|\./tags\|./files.txt\|./files_all.txt\):\|^Binary'
    if [ "$#" = 1 ]
    then
        echo "Usage: Grep [options] <pattern> <dir>"
    else
        grep -r "$@" | grep -v "$exclude"
    fi
}

##### cvs #####

alias CU="cvs -q update -d -P 2>&1 | grep -v '\\(^U\\|is no longer in the repository$\\)'"
alias CUU="cvs -q update -d -P"

# Example: CvsDiff myfile 1.10
function CvsDiff
{
    rev=$2
    majorrev=`echo $rev | cut -d. -f1`
    minorrev=`echo $rev | cut -d. -f2`
    prevrev="$majorrev.$((minorrev - 1))"
    ((cvs log -r$2 $1 | sed -n '/--------/,/========/p');
     (cvs diff -ur $prevrev -r $rev $1 | tail -n+7))
}

function CvsDiffG
{
    CvsDiff | \
    gview - -c "setf diff"
}
##### prompt #####

dollar_symbol="\\$"
alias P=pwd
if [ "$UID" != "0" ] # normal user
then
    dollar_color='22;31'
    if [ "$USERNAME" = "hcs" -o "$USERNAME" = "hoch" ]
    then
        dollar_symbol='$'
    fi
else # root
    dollar_color='31'
    dollar_symbol='\\$\\$'
fi

function p4
{
    PS1="\\[\\033[10;0m\\033[1;34m\\]\\u@\\[\\033[1;32m\\]\\h\\[\\033[1;34m\\]:\\W\\[\\033["$dollar_color"m\\]"$dollar_symbol"\\[\\033[0m\\] "
}

function p3
{
    PS1="\\[\\033[10;0m\\033[1;34m\\]\\u@\\[\\033[1;32m\\]\\h\\[\\033[1;34m\\]:\\w\\[\\033["$dollar_color"m\\]"$dollar_symbol"\\[\\033[0m\\] "
}

function p2
{
    PS1="\\[\\033[10;0m\\033[1;34m\\]\\w\\[\\033["$dollar_color"m\\]"$dollar_symbol"\\[\\033[0m\\] "
}

function p1
{
    PS1="\\[\\033[10;0m\\033[1;34m\\]\$(parse_git_branch)\\W\\[\\033[${dollar_color}m\\]$dollar_symbol\\[\\033[0m\\] "
}

function p0
{
    PS1="\\[\\033[10;0m\\033[1;34m\\]\\[\\033["$dollar_color"m\\]"$dollar_symbol"\\[\\033[0m\\] "
}

function parse_git_branch
{
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

if [ "$1" != "--noprompt" ]
then
    p3
fi

##### emacs #####

function em
{
    emacs --no-splash "$@" >/dev/null 2>/dev/null &
}

##### apt #####

function AI
{
    sudo apt-get install $*
}

alias AS='apt-cache search'

function ASG
{
    apt-cache search "$1" | $VIM -
}

##### directory/file handling #####

function Cd
{
    mkdir -p "$1"
    cd "$1"
}

function CD
{
    mkdir -p "$1"
    cd "$1"
}

function LN
    # $1: link or directory name
    # $2: target
{
    ln -s "$2" "$1"
}

alias d=". CdLs"
#function d
#{
#    . CdLs "$@"
#}

##### GW #####

# open a (g)vim with the result of *w*hich
function GW
{
    x=`which $1`
    if [ "$x" = "" ]
    then
        echo "no such thing"
    else
        $HCS_VIM "$x"
    fi
}

# change *d*irectory of the result of *w*hich
function DW
{
    x=`which $1`
    if [ "$x" = "" ]
    then
        echo "no such thing"
    else
        cd $(dirname $(readlink -f $(which $x)))
    fi
}

complete -o default -c GW
complete -o default -c DW

##### note #####

function note
{
    echo Note for `pwd`
    echo "$@" >> note
}

##### hcshelp #####

alias H=Help
alias HE=Helpedit
alias HL=Helplist

function get_help_file
# $1: file name
# $2: "" or "anyway"
# $3: "" or "secondary"
{
    if [ "$3" = "secondary" ]
    then
        primary=false
    else
        primary=true
    fi

    if [ "$primary" -a '(' -e "$HCS_HELP_DIR_1/$1.txt" ')' ]; then
        echo "$HCS_HELP_DIR_1/$1.txt"
    elif [ "$primary" -a '(' -e "$HCS_HELP_DIR_1/$1.htxt" ')' ]; then
        echo "$HCS_HELP_DIR_1/$1.htxt"
    elif [ -e "$HCS_HELP_DIR_2/$1.txt" ]; then
        echo "$HCS_HELP_DIR_2/$1.txt"
    elif [ -e "$HCS_HELP_DIR_2/$1.htxt" ]; then
        echo "$HCS_HELP_DIR_2/$1.htxt"
    elif [ "$2" = "anyway" ]; then
        if $primary
        then
            echo "$HCS_HELP_DIR_1/$1.txt"
        else
            echo "$HCS_HELP_DIR_2/$1.txt"
        fi
    fi
}

function Help
{
    if [ "$1" = "" ]; then
        Help "help"
    else
        help_file=`get_help_file "$1" 0`
        if [ "$help_file" = "" ]; then
            echo "Subject '$1' does not exist."
        else
            Catless "$help_file"
        fi
    fi
}

function Helpedit
{
    if [ "$2" = 2 ]
    then
        secondary=secondary
    else
        secondary=""
    fi

    help_file=`get_help_file "$1" anyway "$secondary"`
    if [ "$help_file" = "" ]; then
        echo "Subject '$1' does not exist."
    else
        $HCS_VIM "$help_file"
    fi
}

function Helpfind
{
    help_file=`get_help_file "$1" anyway`
    if [ "$help_file" = "" ]; then
        echo "Subject '$1' does not exist."
    else
        echo "$help_file"
    fi
}

function Helplist
{
    ls "$HCS_HELP_DIR_1"  "$HCS_HELP_DIR_2" | sed 's/\.htxt//g' | sed 's/\.txt//g'
}

##### hcs dirs #####

function DirDef
{
    eval export $1="\"$2\""
    alias -- $1-="cd \"$2\""
    alias -- $1--="cd \"$2\"; pwd; ls"
}

dirs_txt="/a/docs/hcs/comp/hcs_help/dirs.txt"

if [ -f "$dirs_txt" ]; then
    . /a/docs/hcs/comp/hcs_help/dirs.txt
fi

alias -- "--"=d

##### clipboard #####

# putting the argument to the clipboard
function C()
{
    case $desktop_manager in
        kde4)
            #dcop klipper klipper setClipboardContents "$1"
            dbus-send --type=method_call --dest=org.kde.klipper \
                 /klipper org.kde.klipper.klipper.setClipboardContents \
                 string:"$1"
            ;;
        kde3)
            dcop klipper klipper setClipboardContents "$1"
            ;;
        *)
            echo Command is not available.
            ;;
    esac
}

# putting the content of a file to the clipboard
function CF()
{
    case $desktop_manager in
        kde4)
            dbus-send --type=method_call --dest=org.kde.klipper \
                 /klipper org.kde.klipper.klipper.setClipboardContents \
                 string:"`cat $1`"
            ;;
        kde3)
            dcop klipper klipper setClipboardContents "`cat $1`"
            ;;
        *)
            echo Command is not available.
            ;;
    esac
}

# putting the path to the clipboard
function CP()
{
    case $desktop_manager in
        kde4)
            dbus-send --type=method_call --dest=org.kde.klipper \
                 /klipper org.kde.klipper.klipper.setClipboardContents \
                 string:"`pwd`"
            ;;
        kde3)
            dcop klipper klipper setClipboardContents "`pwd`"
            ;;
        *)
            echo Command is not available.
            ;;
    esac
}

#function myxclipboard
#{
#    xclip_cmd="xclip $1"
#    if [ "$2" != "" ]
#    then
#        echo -n "$2" | $xclip_cmd
#    else
#        $xclip_cmd
#    fi
#}
#
#function XC1
#{
#    myxclipboard "" "$1"
#}
#
#function XC
#{
#    myxclipboard "-selection clipboard" "$1"
#}

# calls xclip normally
function XC
{
    xclip -selection clipboard "$@"
}

# prints the contents of the clipboard
function XP
{
    (xclip -selection clipboard -o "$@"; echo) | Catless
}

# feeds its argument to xclip
function XA
{
    text="$1"
    shift
    echo -n "$text" | xclip -selection clipboard "$@"
}

##### editing bashrc #####

function EB()
{
    $HCS_VIM_F /a/cp/hcs-utils/bin/Bashrc
    . ~/.bashrc
}

function B()
{
    . ~/.bashrc
}

##### aliases #####

alias If=/sbin/ifconfig
alias IF="/sbin/ifconfig | grep 192.168.1.10"
alias U="unison -auto d"
alias MNT_vali="sshfs hoch@vali.inf.elte.hu:/ /a/x/vali"
alias UMNT_vali="fusermount -u /a/x/vali"
alias MNT_doc2="sshfs hoch@doc2.inf.elte.hu:/home /a/x/doc2 && cd /a/x/doc2"
alias UMNT_doc2="fusermount -u /a/x/doc2"
alias TEA="SLEEP 2 && SOUND"
alias WP="WaitProcess -n"
alias V="Video -g"
alias VNC="vncviewer 192.168.0.3:3"
alias FAH="cd /a/comp/programs/fah; ./fah6"
alias ssh="ssh -X"
alias x="xmessage -file ~/.bashrc -nearmouse"

##### tail #####

function T
{
    if [ "$2" = "" ];
    then
        n=50
    else
        n="$2"
    fi
    tail -n $n "$1" | \
    sed -u 's/.*/x\0/g' | \
    while read line
    do
        echo "[--------------] ${line:1}"
    done

    tail -n 0 --follow=name --retry "$1" | \
    sed -u 's/.*/x\0/g' | \
    while read line
    do
        echo "[`date "+%Y-%m-%d %H:%M:%S"`] ${line:1}"
    done
}

function TT
    # $1: input
    # $2: line numbers to include
    # $3: output file to append
{
    T "$1" "$2" | tee -a "$3"
}

##### Misc #####

function grep_acc
{
    grep "$@" "^[][(){}@#,+$~'\"[:space:]=./_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-]*$"
}

function Find1
{
    find -L -name "$@" | sed 1q
}

function lt
{
    ls -lt "$@" | head
}

function DelPyc
{
    find -name '*.pyc' | xargs t
}
